
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/11-work-in-progress/rhotater_count_minima.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_11-work-in-progress_rhotater_count_minima.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_11-work-in-progress_rhotater_count_minima.py:


Attitude Inversion Minima
=========================

.. GENERATED FROM PYTHON SOURCE LINES 6-88

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    import polars as pl
    import pyvista as pv

    import mirage as mr
    import mirage.vis as mrv

    x = pl.read_parquet(
        '/Users/liamrobinson/Documents/maintained-wip/rhotater/saved.parquet'
    )

    x = x.sort('fun')
    x = x.with_columns(jmag=np.linalg.norm(x['gradient'].to_numpy(), axis=1))

    xk = x['xk'].to_numpy()
    x0 = x['x0'].to_numpy()
    fun = x['fun'].to_numpy()


    def compute_lc_from_x0(x0):
        obj = mr.SpaceObject('cube.obj')

        L = np.array([1.0, 0.0, 0.0])
        O = mr.hat(np.array([1.0, 1.0, 0.0]))
        brdf = mr.Brdf('phong', cd=0.5, cs=0.5, n=3)
        if x0.size == 7:
            itensor = np.abs(np.diag([1.0, 2.0, x0[-1]]))
        if x0.size == 8:
            itensor = np.abs(np.diag([1.0, x0[-2], x0[-1]]))
        else:
            itensor = np.diag([1.0, 2.0, 3.0])

        q0 = mr.mrp_to_quat(x0[:3].reshape(1, -1))
        teval = np.linspace(0, 6, 20)
        w0 = x0[3:6] / teval.max()
        q_of_t, w_of_t = mr.propagate_attitude_torque_free(q0, w0, itensor, teval)
        c_of_t = mr.quat_to_dcm(q_of_t)

        svb = mr.stack_mat_mult_vec(c_of_t, L)
        ovb = mr.stack_mat_mult_vec(c_of_t, O)
        lc = obj.convex_light_curve(brdf, svb, ovb)
        return lc / np.linalg.norm(lc)


    x0i = xk[0]
    x0t = np.array([1.0, 2.0, 3.0, 5.0, 4.0, 2.0, 1.0, 2.0])  # the truth
    print(' x0i = ti.Vector([' + ', '.join([f'{x:6.3f}' for x in x0i]) + '])')
    print(' x0t = ti.Vector([' + ', '.join([f'{x:6.3f}' for x in x0t]) + '])')

    lc = compute_lc_from_x0(x0i)
    lct = compute_lc_from_x0(x0t)


    plt.plot(lct, linewidth=3, c='k', label='Observed')
    plt.plot(lc, 'c--', linewidth=2, label='Converged')


    lcs = []
    for i in range(100):
        lcs.append(compute_lc_from_x0(xk[i]))

    lc_std = np.array(lcs).std(axis=0)
    plt.fill_between(
        np.arange(lc.size),
        lc - 3 * lc_std,
        lc + 3 * lc_std,
        color='r',
        alpha=0.3,
        label=rf'$\pm3\sigma$ for top {len(lcs)}',
    )


    mrv.texit(
        'Attitude inversion results - uniform cube',
        'Epoch seconds',
        'Normalized brightness',
    )
    plt.legend()
    plt.show()




.. image-sg:: /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_001.png
   :alt: Attitude inversion results - uniform cube
   :srcset: /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_001.png, /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_001_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     x0i = ti.Vector([-0.391, -0.120,  0.412, -2.532,  0.946, -2.799])
     x0t = ti.Vector([ 1.000,  2.000,  3.000,  5.000,  4.000,  2.000,  1.000,  2.000])




.. GENERATED FROM PYTHON SOURCE LINES 89-90

Now let's plot a histogram of solution loss function values

.. GENERATED FROM PYTHON SOURCE LINES 90-111

.. code-block:: Python


    s = xk[:, :3]
    s = mr.quat_to_mrp(mr.quat_upper_hemisphere(mr.mrp_to_quat(s)))
    w = xk[:, 3:6].copy()
    w[mr.vecnorm(w).flatten() > 4.0, :] = np.nan

    lf = np.log10(fun)
    loss_frac = (lf - lf.max()) / (lf.min() - lf.max())

    print(loss_frac)

    plt.hist(fun, bins=np.geomspace(1e-4, 1e1, 100))
    plt.xscale('log')
    plt.yscale('log')
    plt.title('Solutions')
    plt.xlabel('Loss values')
    plt.ylabel('Count')
    plt.grid()
    plt.show()





.. image-sg:: /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_002.png
   :alt: Solutions
   :srcset: /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_002.png, /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_002_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 1.          0.9999512   0.9995938  ...  0.02120247  0.00716322
     -0.        ]




.. GENERATED FROM PYTHON SOURCE LINES 112-113

And the distribution of solutions in MRP space

.. GENERATED FROM PYTHON SOURCE LINES 113-128

.. code-block:: Python


    p = pv.Plotter()
    p.set_background('k')
    mrv.scatter3(
        p,
        s,
        scalars=loss_frac,
        opacity=loss_frac,
        cmap='hot',
        point_size=5,
        show_scalar_bar=False,
    )
    # p.show()
    mrv.orbit_plotter(p, gif_name='s_sols.gif', focus=(0.0, 0, 0))




.. image-sg:: /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_003.gif
   :alt: rhotater count minima
   :srcset: /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_003.gif
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 129-130

And the distribution of solutions in angular velocity space

.. GENERATED FROM PYTHON SOURCE LINES 130-144

.. code-block:: Python


    p = pv.Plotter()
    p.set_background('k')
    mrv.scatter3(
        p,
        w,
        scalars=loss_frac,
        opacity=loss_frac,
        cmap='cool',
        point_size=5,
        show_scalar_bar=False,
    )
    # p.show()
    mrv.orbit_plotter(p, gif_name='w_sols.gif', focus=(0, 0, 0))



.. image-sg:: /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_004.gif
   :alt: rhotater count minima
   :srcset: /gallery/11-work-in-progress/images/sphx_glr_rhotater_count_minima_004.gif
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.939 seconds)


.. _sphx_glr_download_gallery_11-work-in-progress_rhotater_count_minima.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: rhotater_count_minima.ipynb <rhotater_count_minima.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: rhotater_count_minima.py <rhotater_count_minima.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: rhotater_count_minima.zip <rhotater_count_minima.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
