
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/11-work-in-progress/precise_orbit_determination.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_11-work-in-progress_precise_orbit_determination.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_11-work-in-progress_precise_orbit_determination.py:


Precise Orbit Determination with Batch Least Squares
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 5-13

.. code-block:: Python


    import datetime
    from typing import Callable

    import numpy as np

    import mirage as mr








.. GENERATED FROM PYTHON SOURCE LINES 14-15

First, let's define a station and a truth object

.. GENERATED FROM PYTHON SOURCE LINES 15-19

.. code-block:: Python


    station = mr.Station()
    obj = mr.SpaceObject('cube.obj', identifier=36411)








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Let's create three line of sight observations of the object

.. GENERATED FROM PYTHON SOURCE LINES 21-27

.. code-block:: Python


    dates_iod = mr.date_linspace(mr.now(), mr.now() + mr.minutes(1), 3)
    lhats_iod = station.object_line_of_sight(obj, dates_iod, apparent=False)
    ras_rad, decs_rad = mr.eci_to_ra_dec(lhats_iod)
    rv2 = mr.gauss_iod(station, dates_iod, ras_rad, decs_rad)








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Now we collect a lot more observations

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: Python


    dates_pod = mr.date_arange(mr.now(), mr.now() + mr.hours(1), mr.seconds(20))
    lhats_pod = station.object_line_of_sight(obj, dates_pod, apparent=False)
    ras_rad, decs_rad = mr.eci_to_ra_dec(lhats_pod)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Let's compute the H matrix for this observation set. We know that the H matrix is defined as the partial derivatives of the observations with respect to the state vector.

.. GENERATED FROM PYTHON SOURCE LINES 36-109

.. code-block:: Python



    def angles_only_measurement_model(state: np.ndarray, dates: np.ndarray) -> np.ndarray:
        assert (
            (state.shape[0] == len(dates))
            if isinstance(dates, np.ndarray)
            else state.size == 6
        ), 'state and dates must have the same number of rows'
        r = state.reshape(-1, 6)[:, :3]
        r_station = station.j2000_at_dates(dates)
        r_station_to_sat = r - r_station
        return np.concatenate(mr.eci_to_ra_dec(r_station_to_sat)).reshape(-1, 2)


    def angles_only_measurement_model_jacobian(
        state: np.ndarray, dates: np.ndarray
    ) -> np.ndarray:
        assert (
            (state.shape[0] == len(dates))
            if isinstance(dates, np.ndarray)
            else state.size == 6
        ), 'state and dates must have the same number of rows'
        r = state.reshape(-1, 6)[:, :3]
        r_station = station.j2000_at_dates(dates)
        r_station_to_sat = r - r_station
        wsq = mr.vecnorm(r_station_to_sat[:, :2]).flatten() ** 2
        w = np.sqrt(wsq)
        rho_sq = mr.vecnorm(r_station_to_sat).flatten() ** 2

        zero = np.zeros_like(wsq)
        H = np.array(
            [
                [-r[:, 1] / wsq, r[:, 0] / wsq, zero, zero, zero, zero],
                [
                    -r[:, 0] * r[:, 2] / (w * rho_sq),
                    -r[:, 1] * r[:, 2] / (w * rho_sq),
                    w / rho_sq,
                    zero,
                    zero,
                    zero,
                ],
            ]
        ).squeeze()

        H2 = H.transpose(2, 0, 1)
        H2 = H2.reshape(-1, 6)
        return H2


    def lumve(
        measurements: np.ndarray,
        dates: np.ndarray[datetime.datetime],
        measurement_model: Callable,
        measurement_model_jacobian: Callable,
        initial_state: np.ndarray,
        initial_covariance: np.ndarray,
    ) -> np.ndarray:
        xk = initial_state
        Pk = initial_covariance
        for _ in range(10):
            states = mr.integrate_orbit_dynamics(xk, dates)
            H = measurement_model_jacobian(states, dates)
            K = Pk @ H.T @ np.linalg.inv(H @ Pk @ H.T)
            Pk = (np.eye(6) - K @ H) @ Pk
            # xk += K @ (measurements - measurement_model(states, dates))
            xk += (
                np.linalg.inv(H.T @ H)
                @ H.T
                @ (measurements - measurement_model(states, dates))
            )
        return xk, Pk









.. GENERATED FROM PYTHON SOURCE LINES 110-111

Now let's run the batch least squares algorithm

.. GENERATED FROM PYTHON SOURCE LINES 111-123

.. code-block:: Python


    measurements = np.vstack(mr.eci_to_ra_dec(lhats_pod)).T
    initial_covariance = np.eye(6) * 1e-6
    initial_state = rv2
    # xk, Pk = lumve(
    #     measurements,
    #     dates_pod,
    #     angles_only_measurement_model,
    #     angles_only_measurement_model_jacobian,
    #     initial_state,
    #     initial_covariance,
    # )








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.028 seconds)


.. _sphx_glr_download_gallery_11-work-in-progress_precise_orbit_determination.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: precise_orbit_determination.ipynb <precise_orbit_determination.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: precise_orbit_determination.py <precise_orbit_determination.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: precise_orbit_determination.zip <precise_orbit_determination.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
