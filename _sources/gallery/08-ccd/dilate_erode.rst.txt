
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/08-ccd/dilate_erode.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_08-ccd_dilate_erode.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_08-ccd_dilate_erode.py:


Dilation and Erosion
====================
Demonstrating how the binary image operations dilation and erosion can be used to build smooth background masks when the background is very noisy

.. GENERATED FROM PYTHON SOURCE LINES 6-47



.. image-sg:: /gallery/08-ccd/images/sphx_glr_dilate_erode_001.png
   :alt: 1. Naive Mask, 2. Erosion & Dilation, 3. Median filter
   :srcset: /gallery/08-ccd/images/sphx_glr_dilate_erode_001.png, /gallery/08-ccd/images/sphx_glr_dilate_erode_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. code-block:: Python


    import cv2
    import matplotlib.pyplot as plt
    import numpy as np
    import pyvista as pv

    freq = np.array([0.689, 0.562, 0.683]) / 1.3
    noise = pv.perlin_noise(1, freq, (0, 0, 0))
    n = 150
    noise_power = 1e-1
    dim = (n, n)
    sampled = pv.sample_function(noise, bounds=(-10, 10, -10, 10, -10, 10), dim=(*dim, 1))
    z = sampled.active_scalars.reshape(dim).squeeze()
    z += np.random.randn(*dim) * noise_power

    open_size = 5
    blur_size = 5
    n_frames = 10

    im = (z < 0).astype(np.uint8)

    plt.figure(figsize=(10, 4))
    plt.subplot(1, 3, 1)
    plt.imshow(im, interpolation='nearest', cmap='gray')
    plt.title('1. Naive Mask')
    plt.subplot(1, 3, 2)
    im = cv2.erode(im, np.ones((open_size, open_size), np.uint8), iterations=1)
    im = cv2.dilate(im, np.ones((open_size, open_size), np.uint8), iterations=1)
    plt.imshow(im, interpolation='nearest', cmap='gray')
    plt.title('2. Erosion & Dilation')
    plt.subplot(1, 3, 3)
    im = cv2.medianBlur(im, ksize=open_size)
    plt.imshow(im, interpolation='nearest', cmap='gray')
    plt.title('3. Median filter')
    plt.tight_layout()

    for ax in plt.gcf().get_axes():
        ax.set_xticks([])
        ax.set_yticks([])

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.317 seconds)


.. _sphx_glr_download_gallery_08-ccd_dilate_erode.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dilate_erode.ipynb <dilate_erode.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dilate_erode.py <dilate_erode.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: dilate_erode.zip <dilate_erode.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
