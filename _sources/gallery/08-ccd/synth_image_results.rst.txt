
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/08-ccd/synth_image_results.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_08-ccd_synth_image_results.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_08-ccd_synth_image_results.py:


Synthetic Image Results
=======================

Comparison plots for the synthetic and real images

.. GENERATED FROM PYTHON SOURCE LINES 7-59

.. code-block:: Python


    from types import SimpleNamespace

    import matplotlib.pyplot as plt
    import numpy as np
    from matplotlib import colormaps as cm

    import mirage as mr
    import mirage.vis as mrv

    info_path = '/Users/liamrobinson/Library/CloudStorage/OneDrive-purdue.edu/pogs/2022-09-18/ObservationData.mat'
    add_distortion = True
    add_refraction = True
    station = mr.Station()
    station.telescope.fwhm = 3
    station.telescope.gain = 1 / 4
    mr.tic('Loading star catalog')
    catalog = mr.GaiaSpectralStarCatalog(station, mr.now())
    mr.toc()

    yaoe1 = 1000, 800
    xaoe1 = 250, 490
    yaoe2 = 750, 550
    xaoe2 = 250, 490

    res = mr.generate_matched_image(
        info_path,
        200,
        station,
        catalog,
        add_distortion,
        add_refraction,
        bias_variance=175,
    )

    n = SimpleNamespace(**res)

    img_sym_prepared = np.log10(np.clip(n.img_sym, 1, np.inf))

    plt.figure()
    plt.plot(n.counts_sym, n.fit_counts_obs_of_sym(n.counts_sym), c='r', markersize=7)
    plt.scatter(n.counts_sym, n.counts_obs, s=5)
    plt.xlabel('Synthetic counts')
    plt.ylabel('Observed counts')
    plt.grid()
    plt.xscale('log')
    plt.yscale('log')
    plt.legend(['Best linear fit', 'Data'])
    plt.show()

    # endd




.. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_001.png
   :alt: synth image results
   :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_001.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_001_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading star catalog: 1.34e+00 seconds
    Applying 1.14e-02 deg of refraction
    fits_info["integration_time"]=4.0
    sim counts are too high by a factor of 1.35
    BEFORE QUEST: median error 84.77 pixels
    Performing the QUEST fit with 158 stars
    Applying a 1.96e-02 degree rotation to the telescope orientation
    AFTER QUEST: median error 1.14 pixels
    Objects in frame 1:
    NAVSTAR 80 (USA 309)
    Synthesizing CCD Image: 8.63e-01 seconds




.. GENERATED FROM PYTHON SOURCE LINES 60-61

Overlaying the two images

.. GENERATED FROM PYTHON SOURCE LINES 61-104

.. code-block:: Python


    br_val = 1010  # For the gps obs
    n.img = n.img.astype(int)
    n.img[n.img <= br_val] = br_val + 1
    n.img -= br_val

    img_prepared = np.log10(n.img)

    plt.figure()
    plt.scatter(n.err_updated[:, 0], n.err_updated[:, 1], s=5)
    plt.yscale('symlog')
    plt.xscale('symlog')
    t = np.linspace(0, 2 * np.pi + 0.1, 1000)
    plt.plot(5 * np.cos(t), 5 * np.sin(t), c='k')
    plt.plot(1 * np.cos(t), 1 * np.sin(t), c='r')
    plt.legend(
        ['Centroid errors', '5-pixel boundary', '1-pixel boundary'], loc='upper right'
    )
    plt.ylim(-100, 100)
    plt.xlim(-100, 100)
    plt.xlabel('$x$ pixel error')
    plt.ylabel('$y$ pixel error')
    plt.grid()

    img_prepared_sub = img_prepared
    img_sym_prepared_sub = img_sym_prepared

    clim_obs = [np.max(img_prepared_sub), 0]
    clim_sym = [np.max(img_sym_prepared_sub), 0]
    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(img_prepared_sub, cmap='gray')
    plt.title('Observed')
    plt.clim(*clim_sym)
    plt.colorbar(label=r'$\log_{10}\left(\text{ADU}\right)$', cax=mrv.get_cbar_ax())

    plt.subplot(1, 2, 2)
    plt.imshow(img_sym_prepared_sub, cmap='gray')
    plt.title('Synthetic')
    plt.clim(*clim_sym)
    plt.colorbar(label=r'$\log_{10}\left(\text{ADU}\right)$', cax=mrv.get_cbar_ax())
    plt.tight_layout()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_002.png
         :alt: synth image results
         :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_002.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_002_2_00x.png 2.00x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_003.png
         :alt: Observed, Synthetic
         :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_003.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_003_2_00x.png 2.00x
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 105-106

Subtracting the two images

.. GENERATED FROM PYTHON SOURCE LINES 106-154

.. code-block:: Python

    adu_err = n.img_sym.astype(np.int64) - n.img.astype(np.int64)
    adu_err_stdev = np.abs(adu_err) / np.sqrt(np.abs(n.img_sym.astype(np.int64)))
    plt.figure(figsize=(8, 6))
    cm = cm.get_cmap('plasma')
    max_sigma = 30

    plt.subplot(2, 2, 1)
    plt.imshow(adu_err_stdev, cmap=cm)
    plt.clim(0, max_sigma)
    plt.xlim(*xaoe2)
    plt.ylim(*yaoe2)
    plt.xlabel('x [pix]')
    plt.ylabel('y [pix]')
    # plt.colorbar(label="ADU error standard deviations", cax=mrv.get_cbar_ax())

    plt.subplot(2, 2, 3)
    data = np.ceil(adu_err_stdev[yaoe2[1] : yaoe2[0], xaoe2[0] : xaoe2[1]].flatten())
    n, bins, patches = plt.hist(data, bins=range(max_sigma), density=True)
    bin_centers = 0.5 * (bins[:-1] + bins[1:])
    col = bin_centers - min(bin_centers)
    col /= max(col)
    for c, p in zip(col, patches):
        plt.setp(p, 'facecolor', cm(c))

    mrv.texit('', 'Error $\sigma$', 'Density')

    plt.subplot(2, 2, 2)
    plt.imshow(adu_err_stdev, cmap=cm)
    plt.clim(0, max_sigma)
    plt.xlim(*xaoe1)
    plt.ylim(*yaoe1)
    plt.xlabel('x [pix]')
    plt.ylabel('y [pix]')
    # plt.colorbar(label="ADU error standard deviations", cax=mrv.get_cbar_ax())

    plt.subplot(2, 2, 4)
    data = adu_err_stdev[yaoe1[1] : yaoe1[0], xaoe1[0] : xaoe1[1]].flatten()
    n, bins, patches = plt.hist(data, bins=range(max_sigma), density=True)
    bin_centers = 0.5 * (bins[:-1] + bins[1:])
    col = bin_centers - min(bin_centers)
    col /= max(col)
    for c, p in zip(col, patches):
        plt.setp(p, 'facecolor', cm(c))

    mrv.texit('', 'Error $\sigma$', 'Density')

    plt.tight_layout()
    plt.show()



.. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_004.png
   :alt: synth image results
   :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_004.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_004_2_00x.png 2.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 7.799 seconds)


.. _sphx_glr_download_gallery_08-ccd_synth_image_results.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: synth_image_results.ipynb <synth_image_results.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: synth_image_results.py <synth_image_results.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: synth_image_results.zip <synth_image_results.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
