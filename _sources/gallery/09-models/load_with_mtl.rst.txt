
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/09-models/load_with_mtl.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_09-models_load_with_mtl.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_09-models_load_with_mtl.py:


Loading with MTL Properties
===========================

.. GENERATED FROM PYTHON SOURCE LINES 5-15

.. code-block:: Python


    import os

    import numpy as np

    import mirage as mr

    obj_name = 'untitled.obj'
    obj_path = os.path.join('/Users/liamrobinson/Downloads/', obj_name)








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Let's take a look at what the obj file looks like

.. GENERATED FROM PYTHON SOURCE LINES 17-21

.. code-block:: Python


    with open(obj_path, 'r') as f:
        print(f.read())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    # Blender v3.1.2 OBJ File: ''
    # www.blender.org
    mtllib untitled.mtl
    o Cube
    v 1.000000 1.000000 -1.000000
    v 1.000000 -1.000000 -1.000000
    v 1.000000 1.000000 1.000000
    v 1.000000 -1.000000 1.000000
    v -1.000000 1.000000 -1.000000
    v -1.000000 -1.000000 -1.000000
    v -1.000000 1.000000 1.000000
    v -1.000000 -1.000000 1.000000
    vt 0.875000 0.500000
    vt 0.625000 0.750000
    vt 0.625000 0.500000
    vt 0.375000 0.500000
    vt 0.125000 0.750000
    vt 0.125000 0.500000
    vt 0.375000 0.750000
    vt 0.625000 0.250000
    vt 0.375000 0.250000
    vt 0.875000 0.750000
    vt 0.375000 1.000000
    vt 0.625000 0.000000
    vt 0.375000 0.000000
    vt 0.625000 1.000000
    vn 0.0000 1.0000 0.0000
    vn 0.0000 -1.0000 0.0000
    vn 1.0000 0.0000 0.0000
    vn 0.0000 0.0000 -1.0000
    vn 0.0000 0.0000 1.0000
    vn -1.0000 0.0000 0.0000
    usemtl Material
    s off
    f 5/1/1 3/2/1 1/3/1
    f 2/4/2 8/5/2 6/6/2
    f 1/3/3 4/7/3 2/4/3
    f 5/8/4 2/4/4 6/9/4
    f 5/1/1 7/10/1 3/2/1
    f 2/4/2 4/7/2 8/5/2
    f 1/3/3 3/2/3 4/7/3
    f 5/8/4 1/3/4 2/4/4
    usemtl Material.001
    f 3/2/5 8/11/5 4/7/5
    f 7/12/6 6/9/6 8/13/6
    f 3/2/5 7/14/5 8/11/5
    f 7/12/6 5/8/6 6/9/6





.. GENERATED FROM PYTHON SOURCE LINES 22-23

And the mtl file

.. GENERATED FROM PYTHON SOURCE LINES 23-26

.. code-block:: Python

    with open(os.path.join(os.path.split(obj_path)[0], 'untitled.mtl'), 'r') as f:
        print(f.read())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    # Blender MTL File: 'None'
    # Material Count: 2

    newmtl Material
    Ns 359.999993
    Ka 1.000000 1.000000 1.000000
    Kd 0.165374 0.800000 0.204467
    Ks 0.221088 0.221088 0.221088
    Ke 0.000000 0.000000 0.000000
    Ni 1.450000
    d 1.000000
    illum 2

    newmtl Material.001
    Ns 250.000000
    Ka 1.000000 1.000000 1.000000
    Kd 0.071427 0.889286 0.800000
    Ks 0.500000 0.500000 0.500000
    Ke 0.000000 0.000000 0.000000
    Ni 16.849998
    d 1.000000
    illum 2





.. GENERATED FROM PYTHON SOURCE LINES 27-36

We interpret:

- The red channel of Kd (in Blender this is the red channel of the base color) as :math:`C_d`

- The blue channel of Kd as :math:`C_s`

- The index of refraction Ni (IOR in Blender) as the specular exponent :math:`n`

For more information on making an mesh in blender with per-face materials, see `this documentation page <https://docs.blender.org/manual/en/4.1/modeling/texts/editing.html#assigning-materials>`_

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: Python


    mr.tic('Pure python load time')
    obj = mr.load_obj(obj_path)
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pure python load time: 1.36e-03 seconds




.. GENERATED FROM PYTHON SOURCE LINES 42-43

We can print the the cd, cs, and n attributes of the object, each of which should now have one entry per face

.. GENERATED FROM PYTHON SOURCE LINES 43-48

.. code-block:: Python


    print(f'{obj.cd=}')
    print(f'{obj.cs=}')
    print(f'{obj.n=}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    obj.cd=array([[0.165374],
           [0.165374],
           [0.165374],
           [0.165374],
           [0.165374],
           [0.165374],
           [0.165374],
           [0.165374],
           [0.071427],
           [0.071427],
           [0.071427],
           [0.071427]])
    obj.cs=array([[0.8     ],
           [0.8     ],
           [0.8     ],
           [0.8     ],
           [0.8     ],
           [0.8     ],
           [0.8     ],
           [0.8     ],
           [0.889286],
           [0.889286],
           [0.889286],
           [0.889286]])
    obj.n=array([[ 1.45    ],
           [ 1.45    ],
           [ 1.45    ],
           [ 1.45    ],
           [ 1.45    ],
           [ 1.45    ],
           [ 1.45    ],
           [ 1.45    ],
           [16.849998],
           [16.849998],
           [16.849998],
           [16.849998]])




.. GENERATED FROM PYTHON SOURCE LINES 49-50

Let's build a BRDF with these attributes. Note if validate=True, the BRDF initialization procedure will check for energy conservation

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python


    brdf = mr.Brdf('phong', cd=obj.cd, cs=obj.cs, n=obj.n, validate=False)








.. GENERATED FROM PYTHON SOURCE LINES 54-55

Now the BRDF will apply the material properties of each face when computing a convex LC

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: Python


    npts = int(100)
    L = mr.rand_unit_vectors(npts)
    O = mr.rand_unit_vectors(npts)
    mr.tic('lc')
    lc1 = obj.convex_light_curve(brdf, L, O)
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    lc: 8.32e-04 seconds




.. GENERATED FROM PYTHON SOURCE LINES 64-65

Notice that you can also mix and match uniform and varying properties. Here :math:`C_d` has one entry per face, but the other two properties are uniform

.. GENERATED FROM PYTHON SOURCE LINES 65-70

.. code-block:: Python


    brdf.cd = np.tile(brdf.cd[[0]], brdf.cd.shape)
    brdf.cs = 0.9
    brdf.n = 1
    lc2 = obj.convex_light_curve(brdf, L, O)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.014 seconds)


.. _sphx_glr_download_gallery_09-models_load_with_mtl.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: load_with_mtl.ipynb <load_with_mtl.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: load_with_mtl.py <load_with_mtl.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
