
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/09-models/shape_interpolation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_09-models_shape_interpolation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_09-models_shape_interpolation.py:


Shape Interpolation
===================

Given two shapes as triangulated 3D models, how can we smoothly interpolate another model between them using signed distance fields

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: Python


    import numpy as np
    import pyvista as pv

    import mirage as mr








.. GENERATED FROM PYTHON SOURCE LINES 14-15

Animating the entire interpolation

.. GENERATED FROM PYTHON SOURCE LINES 15-36

.. code-block:: Python


    obj1 = mr.SpaceObject('icosahedron.obj').clean()
    obj2 = mr.SpaceObject('duck.obj').clean()

    pl = pv.Plotter()
    pl.open_gif('shape_interpolation.gif')

    for frac1 in np.concatenate((np.linspace(0, 1, 20), np.linspace(1, 0, 20))):
        weights = np.array([1 - frac1, frac1]).astype(float)
        mr.tic()
        obj_merged = mr.merge_shapes([obj1, obj2], weights)
        mr.toc()
        pl.add_mesh(obj_merged._mesh, color='lightblue', name='mesh', smooth_shading=True)
        pl.add_text(
            f'{weights[0]*100:3.0f}% Icosahedron \n{weights[1]*100:3.0f}% Duck',
            font='courier',
            name='label',
        )
        pl.write_frame()
    pl.close()




.. image-sg:: /gallery/09-models/images/sphx_glr_shape_interpolation_001.gif
   :alt: shape interpolation
   :srcset: /gallery/09-models/images/sphx_glr_shape_interpolation_001.gif
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Elapsed time: 4.95e-01 seconds
    Elapsed time: 5.10e-01 seconds
    Elapsed time: 4.78e-01 seconds
    Elapsed time: 4.80e-01 seconds
    Elapsed time: 4.81e-01 seconds
    Elapsed time: 5.72e-01 seconds
    Elapsed time: 5.12e-01 seconds
    Elapsed time: 5.06e-01 seconds
    Elapsed time: 5.21e-01 seconds
    Elapsed time: 5.12e-01 seconds
    Elapsed time: 4.98e-01 seconds
    Elapsed time: 4.79e-01 seconds
    Elapsed time: 4.85e-01 seconds
    Elapsed time: 4.62e-01 seconds
    Elapsed time: 4.80e-01 seconds
    Elapsed time: 4.67e-01 seconds
    Elapsed time: 4.77e-01 seconds
    Elapsed time: 4.67e-01 seconds
    Elapsed time: 4.70e-01 seconds
    Elapsed time: 4.67e-01 seconds
    Elapsed time: 4.81e-01 seconds
    Elapsed time: 4.61e-01 seconds
    Elapsed time: 4.63e-01 seconds
    Elapsed time: 4.48e-01 seconds
    Elapsed time: 4.68e-01 seconds
    Elapsed time: 5.26e-01 seconds
    Elapsed time: 4.95e-01 seconds
    Elapsed time: 4.88e-01 seconds
    Elapsed time: 5.35e-01 seconds
    Elapsed time: 4.95e-01 seconds
    Elapsed time: 5.51e-01 seconds
    Elapsed time: 4.89e-01 seconds
    Elapsed time: 5.43e-01 seconds
    Elapsed time: 5.43e-01 seconds
    Elapsed time: 5.33e-01 seconds
    Elapsed time: 4.92e-01 seconds
    Elapsed time: 5.26e-01 seconds
    Elapsed time: 5.66e-01 seconds
    Elapsed time: 5.05e-01 seconds
    Elapsed time: 5.18e-01 seconds




.. GENERATED FROM PYTHON SOURCE LINES 37-38

Individual interpolation steps in a grid

.. GENERATED FROM PYTHON SOURCE LINES 38-58

.. code-block:: Python


    pl = pv.Plotter(shape=(2, 2))

    for i, weight1 in enumerate(np.linspace(0, 1, 4)):
        weights = np.array([1 - weight1, weight1]).astype(float)
        obj_merged = mr.merge_shapes(
            [
                mr.SpaceObject('icosahedron.obj').clean(),
                mr.SpaceObject('torus.obj').clean(),
            ],
            weights,
        )
        pl.subplot(i // 2, i % 2)
        pl.add_mesh(obj_merged._mesh, color='lightblue', name='mesh', smooth_shading=True)
        pl.add_text(
            f'{weights[0]*100:3.0f}% Icosahedron \n{weights[1]*100:3.0f}% Torus',
            font='courier',
            name='label',
        )
    pl.show()



.. image-sg:: /gallery/09-models/images/sphx_glr_shape_interpolation_002.png
   :alt: shape interpolation
   :srcset: /gallery/09-models/images/sphx_glr_shape_interpolation_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 25.976 seconds)


.. _sphx_glr_download_gallery_09-models_shape_interpolation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: shape_interpolation.ipynb <shape_interpolation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: shape_interpolation.py <shape_interpolation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: shape_interpolation.zip <shape_interpolation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
