
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/01-light_curves/neural_network_brightness.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_01-light_curves_neural_network_brightness.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_01-light_curves_neural_network_brightness.py:


Neural Network Brightness
=========================

Trains a neural network to predict the brightness of a specular cube in an arbitrary lighting and observation conditions and compares the results to the truth

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns

    import mirage as mr
    import mirage.sim as mrsim








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Let's define the object and the BRDF

.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: Python

    obj = mr.SpaceObject('cube.obj')
    brdf = mr.Brdf('phong', cd=0.5, cs=0.5, n=10)







.. GENERATED FROM PYTHON SOURCE LINES 20-21

We now define the Multi-Layer Perceptron (MLP) brightness model. Note that the ``layers=(150, 50, 150)`` keyword argument defines the number of neurons in each densely-connected layer.

.. GENERATED FROM PYTHON SOURCE LINES 21-22

.. code-block:: Python

    mlp_bm = mrsim.MLPBrightnessModel(obj, brdf, use_engine=False)







.. GENERATED FROM PYTHON SOURCE LINES 23-24

Now we train the model on a set number of training lighting and observation configurations. Usually ``1e5``-``1e6`` are required for a *good* fit

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: Python

    num_train = int(1e3)
    mlp_bm.train(num_train)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Compute training LC: 7.23e-03 seconds
    Iteration 1, loss = 0.32464432
    Iteration 2, loss = 0.16798486
    Iteration 3, loss = 0.16964260
    Iteration 4, loss = 0.14704229
    Iteration 5, loss = 0.14825076
    Iteration 6, loss = 0.14580884
    Iteration 7, loss = 0.14343895
    Iteration 8, loss = 0.14173670
    Iteration 9, loss = 0.14002626
    Iteration 10, loss = 0.13947274
    Iteration 11, loss = 0.13862170
    Iteration 12, loss = 0.13702718
    Iteration 13, loss = 0.13574060
    Iteration 14, loss = 0.13478764
    Iteration 15, loss = 0.13328322
    Iteration 16, loss = 0.13294153
    Iteration 17, loss = 0.13006794
    Iteration 18, loss = 0.13001462
    Iteration 19, loss = 0.12794882
    Iteration 20, loss = 0.12565385
    Iteration 21, loss = 0.12301670
    Iteration 22, loss = 0.12190412
    Iteration 23, loss = 0.11774561
    Iteration 24, loss = 0.11632997
    Iteration 25, loss = 0.11278438
    Iteration 26, loss = 0.10943647
    Iteration 27, loss = 0.10503709
    Iteration 28, loss = 0.10027491
    Iteration 29, loss = 0.09705003
    Iteration 30, loss = 0.09269539
    Iteration 31, loss = 0.08774952
    Iteration 32, loss = 0.08262636
    Iteration 33, loss = 0.07716462
    Iteration 34, loss = 0.07387967
    Iteration 35, loss = 0.06931856
    Iteration 36, loss = 0.06734955
    Iteration 37, loss = 0.06592854
    Iteration 38, loss = 0.05959529
    Iteration 39, loss = 0.05616470
    Iteration 40, loss = 0.05322350
    Iteration 41, loss = 0.05098113
    Iteration 42, loss = 0.04866681
    Iteration 43, loss = 0.04723658
    Iteration 44, loss = 0.04496964
    Iteration 45, loss = 0.04451634
    Iteration 46, loss = 0.04184196
    Iteration 47, loss = 0.04179709
    Iteration 48, loss = 0.03984577
    Iteration 49, loss = 0.03771139
    Iteration 50, loss = 0.03514973
    Iteration 51, loss = 0.03409104
    Iteration 52, loss = 0.03337070
    Iteration 53, loss = 0.03042051
    Iteration 54, loss = 0.03077957
    Iteration 55, loss = 0.03014925
    Iteration 56, loss = 0.02829824
    Iteration 57, loss = 0.03106144
    Iteration 58, loss = 0.02870972
    Iteration 59, loss = 0.02670879
    Iteration 60, loss = 0.02346574
    Iteration 61, loss = 0.02259857
    Iteration 62, loss = 0.02153123
    Iteration 63, loss = 0.02147580
    Iteration 64, loss = 0.01968570
    Iteration 65, loss = 0.02026749
    Iteration 66, loss = 0.02082846
    Iteration 67, loss = 0.01967574
    Iteration 68, loss = 0.01793836
    Iteration 69, loss = 0.01709853
    Iteration 70, loss = 0.01617417
    Iteration 71, loss = 0.01476002
    Iteration 72, loss = 0.01415433
    Iteration 73, loss = 0.01314504
    Iteration 74, loss = 0.01358364
    Iteration 75, loss = 0.01289717
    Iteration 76, loss = 0.01246328
    Iteration 77, loss = 0.01180774
    Iteration 78, loss = 0.01216719
    Iteration 79, loss = 0.01207777
    Iteration 80, loss = 0.01225565
    Iteration 81, loss = 0.01161558
    Iteration 82, loss = 0.01061794
    Iteration 83, loss = 0.01004119
    Iteration 84, loss = 0.00934470
    Iteration 85, loss = 0.00926044
    Iteration 86, loss = 0.00852882
    Iteration 87, loss = 0.00817888
    Iteration 88, loss = 0.00818506
    Iteration 89, loss = 0.00766433
    Iteration 90, loss = 0.00874122
    Iteration 91, loss = 0.00823568
    Iteration 92, loss = 0.00834873
    Iteration 93, loss = 0.00801801
    Iteration 94, loss = 0.00737619
    Iteration 95, loss = 0.00626488
    Iteration 96, loss = 0.00674794
    Iteration 97, loss = 0.00640208
    Iteration 98, loss = 0.00637000
    Iteration 99, loss = 0.00609358
    Iteration 100, loss = 0.00640316
    Iteration 101, loss = 0.00639131
    Iteration 102, loss = 0.00572168
    Iteration 103, loss = 0.00523528
    Iteration 104, loss = 0.00502837
    Iteration 105, loss = 0.00522422
    Iteration 106, loss = 0.00530941
    Iteration 107, loss = 0.00455152
    Iteration 108, loss = 0.00488245
    Iteration 109, loss = 0.00470888
    Iteration 110, loss = 0.00409225
    Iteration 111, loss = 0.00420301
    Iteration 112, loss = 0.00459057
    Iteration 113, loss = 0.00418948
    Iteration 114, loss = 0.00379284
    Iteration 115, loss = 0.00387776
    Iteration 116, loss = 0.00382548
    Iteration 117, loss = 0.00443311
    Iteration 118, loss = 0.00382016
    Iteration 119, loss = 0.00430142
    Iteration 120, loss = 0.00384866
    Iteration 121, loss = 0.00414921
    Iteration 122, loss = 0.00358966
    Iteration 123, loss = 0.00345806
    Iteration 124, loss = 0.00324294
    Iteration 125, loss = 0.00327787
    Iteration 126, loss = 0.00307919
    Iteration 127, loss = 0.00294103
    Iteration 128, loss = 0.00304967
    Iteration 129, loss = 0.00270051
    Iteration 130, loss = 0.00268133
    Iteration 131, loss = 0.00247494
    Iteration 132, loss = 0.00260538
    Iteration 133, loss = 0.00236232
    Iteration 134, loss = 0.00219224
    Iteration 135, loss = 0.00229990
    Iteration 136, loss = 0.00215292
    Iteration 137, loss = 0.00210646
    Iteration 138, loss = 0.00215626
    Iteration 139, loss = 0.00215491
    Iteration 140, loss = 0.00225467
    Iteration 141, loss = 0.00200172
    Iteration 142, loss = 0.00208190
    Iteration 143, loss = 0.00202651
    Iteration 144, loss = 0.00187997
    Iteration 145, loss = 0.00197278
    Iteration 146, loss = 0.00186318
    Iteration 147, loss = 0.00187511
    Iteration 148, loss = 0.00171799
    Iteration 149, loss = 0.00180868
    Iteration 150, loss = 0.00161846
    Iteration 151, loss = 0.00177987
    Iteration 152, loss = 0.00165659
    Iteration 153, loss = 0.00153372
    Iteration 154, loss = 0.00142834
    Iteration 155, loss = 0.00140936
    Iteration 156, loss = 0.00134693
    Iteration 157, loss = 0.00141081
    Iteration 158, loss = 0.00134873
    Iteration 159, loss = 0.00131547
    Iteration 160, loss = 0.00136457
    Iteration 161, loss = 0.00124726
    Iteration 162, loss = 0.00134377
    Iteration 163, loss = 0.00139129
    Iteration 164, loss = 0.00133520
    Iteration 165, loss = 0.00130071
    Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.
    Fit against 1000 pts: : 5.99e+00 seconds




.. GENERATED FROM PYTHON SOURCE LINES 28-29

We can now simulate a torque-free attitude profile to inspect the quality of the fit

.. GENERATED FROM PYTHON SOURCE LINES 29-40

.. code-block:: Python

    t_eval = np.linspace(0, 10, 1000)
    q, _ = mr.propagate_attitude_torque_free(
        np.array([0.0, 0.0, 0.0, 1.0]),
        np.array([1.0, 1.0, 1.0]),
        np.diag([1, 2, 3]),
        t_eval,
    )
    dcm = mr.quat_to_dcm(q)
    ovb = mr.stack_mat_mult_vec(dcm, np.array([[1, 0, 0]]))
    svb = mr.stack_mat_mult_vec(dcm, np.array([[0, 1, 0]]))








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Evaluating the model in its two available formats - as a native ``scikit-learn`` model and as an Open Neural Network eXchange (ONNX) model

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: Python

    mr.tic('Evaluate trained model with sklearn')
    mdl_b_sklearn = mlp_bm.eval(ovb, svb, eval_mode_pref='sklearn')
    mr.toc()
    mr.tic('Evaluate trained model with onnx')
    mdl_b_onnx = mlp_bm.eval(ovb, svb, eval_mode_pref='onnx')
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate trained model with sklearn: 2.38e-03 seconds
    Evaluate trained model with onnx: 1.09e-03 seconds




.. GENERATED FROM PYTHON SOURCE LINES 50-51

We can save both of these representations to file:

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python

    mlp_bm.save_to_file(save_as_format='onnx')
    mlp_bm.save_to_file(save_as_format='sklearn')








.. GENERATED FROM PYTHON SOURCE LINES 55-56

Now we load the model from its ``.onxx`` file we just saved and evaluate the brightness

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: Python

    mlp_bm.load_from_file(mlp_bm.onnx_file_name)
    mr.tic('Evaluate loaded model with onxx')
    mdl_onnx_loaded = mlp_bm.eval(ovb, svb, eval_mode_pref='onnx')
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate loaded model with onxx: 6.89e-04 seconds




.. GENERATED FROM PYTHON SOURCE LINES 62-63

And we do the same for the ``scikit-learn`` ``.plk`` file we saved

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python

    mlp_bm.load_from_file(mlp_bm.sklearn_file_name)
    mr.tic('Evaluate loaded model with sklearn')
    mdl_sklearn_loaded = mlp_bm.eval(ovb, svb, eval_mode_pref='sklearn')
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate loaded model with sklearn: 1.09e-02 seconds




.. GENERATED FROM PYTHON SOURCE LINES 69-70

We can easily confirm that all four model evaluations have produced the same prediction

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: Python

    print(np.max(np.abs(mdl_b_sklearn - mdl_onnx_loaded)))
    print(np.max(np.abs(mdl_b_onnx - mdl_onnx_loaded)))
    print(np.max(np.abs(mdl_b_sklearn - mdl_sklearn_loaded)))
    print(np.max(np.abs(mdl_b_onnx - mdl_sklearn_loaded)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    9.376837890595624e-07
    0.0
    0.0
    9.376837890595624e-07




.. GENERATED FROM PYTHON SOURCE LINES 76-77

We can now finish off by evaluating the true brightness in this attitude profile and plot the results

.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: Python

    true_b = mlp_bm.brightness(svb, ovb)

    plt.figure()
    sns.lineplot(x=t_eval, y=true_b, errorbar=None)
    sns.lineplot(x=t_eval, y=mdl_b_sklearn, errorbar=None)
    plt.title(f'Light Curves for {obj.file_name}, {num_train} Training Points')
    plt.xlabel('Time [s]')
    plt.ylabel('Normalized brightness')
    plt.legend(['True', 'Model'])
    plt.grid()
    plt.show()




.. image-sg:: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001.png
   :alt: Light Curves for cube.obj, 1000 Training Points
   :srcset: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001.png, /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-91

We can also train on magnitude data instead of irradiance:

.. GENERATED FROM PYTHON SOURCE LINES 91-98

.. code-block:: Python

    mlp_bm = mrsim.MLPBrightnessModel(obj, brdf, use_engine=True)
    mlp_bm.train(num_train)

    mr.tic('Evaluate trained model with onnx')
    mdl_b_onnx = mlp_bm.eval(ovb, svb)
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Compute training LC: 4.60e-01 seconds
    Iteration 1, loss = 0.14598028
    Iteration 2, loss = 0.12962329
    Iteration 3, loss = 0.12182160
    Iteration 4, loss = 0.11971810
    Iteration 5, loss = 0.11938281
    Iteration 6, loss = 0.11703584
    Iteration 7, loss = 0.11517514
    Iteration 8, loss = 0.11322809
    Iteration 9, loss = 0.11179461
    Iteration 10, loss = 0.10946904
    Iteration 11, loss = 0.10854123
    Iteration 12, loss = 0.10600843
    Iteration 13, loss = 0.10328510
    Iteration 14, loss = 0.10170453
    Iteration 15, loss = 0.09931943
    Iteration 16, loss = 0.09678656
    Iteration 17, loss = 0.09268834
    Iteration 18, loss = 0.09048458
    Iteration 19, loss = 0.08671118
    Iteration 20, loss = 0.08192758
    Iteration 21, loss = 0.07963941
    Iteration 22, loss = 0.07421914
    Iteration 23, loss = 0.07034716
    Iteration 24, loss = 0.06912459
    Iteration 25, loss = 0.06430084
    Iteration 26, loss = 0.06055087
    Iteration 27, loss = 0.05783151
    Iteration 28, loss = 0.05460302
    Iteration 29, loss = 0.05255923
    Iteration 30, loss = 0.04830851
    Iteration 31, loss = 0.04525902
    Iteration 32, loss = 0.04378180
    Iteration 33, loss = 0.04201262
    Iteration 34, loss = 0.03912782
    Iteration 35, loss = 0.03997580
    Iteration 36, loss = 0.04132254
    Iteration 37, loss = 0.03690458
    Iteration 38, loss = 0.03498264
    Iteration 39, loss = 0.03225387
    Iteration 40, loss = 0.03307827
    Iteration 41, loss = 0.02966336
    Iteration 42, loss = 0.03089538
    Iteration 43, loss = 0.02942375
    Iteration 44, loss = 0.02723316
    Iteration 45, loss = 0.02715045
    Iteration 46, loss = 0.02587673
    Iteration 47, loss = 0.02471391
    Iteration 48, loss = 0.02358644
    Iteration 49, loss = 0.02385116
    Iteration 50, loss = 0.02362032
    Iteration 51, loss = 0.02177682
    Iteration 52, loss = 0.02110654
    Iteration 53, loss = 0.02024553
    Iteration 54, loss = 0.01867561
    Iteration 55, loss = 0.01795986
    Iteration 56, loss = 0.01732572
    Iteration 57, loss = 0.01638314
    Iteration 58, loss = 0.01628773
    Iteration 59, loss = 0.01631728
    Iteration 60, loss = 0.01702213
    Iteration 61, loss = 0.01524602
    Iteration 62, loss = 0.01433521
    Iteration 63, loss = 0.01458482
    Iteration 64, loss = 0.01502108
    Iteration 65, loss = 0.01366725
    Iteration 66, loss = 0.01389365
    Iteration 67, loss = 0.01295599
    Iteration 68, loss = 0.01252006
    Iteration 69, loss = 0.01180717
    Iteration 70, loss = 0.01274844
    Iteration 71, loss = 0.01209423
    Iteration 72, loss = 0.01075570
    Iteration 73, loss = 0.01121013
    Iteration 74, loss = 0.01017052
    Iteration 75, loss = 0.00950882
    Iteration 76, loss = 0.00935300
    Iteration 77, loss = 0.01032738
    Iteration 78, loss = 0.01115392
    Iteration 79, loss = 0.01023564
    Iteration 80, loss = 0.01021806
    Iteration 81, loss = 0.00984527
    Iteration 82, loss = 0.00941753
    Iteration 83, loss = 0.00958997
    Iteration 84, loss = 0.00824232
    Iteration 85, loss = 0.00818053
    Iteration 86, loss = 0.00753618
    Iteration 87, loss = 0.00777970
    Iteration 88, loss = 0.00712713
    Iteration 89, loss = 0.00721818
    Iteration 90, loss = 0.00714521
    Iteration 91, loss = 0.00685273
    Iteration 92, loss = 0.00687088
    Iteration 93, loss = 0.00686094
    Iteration 94, loss = 0.00700345
    Iteration 95, loss = 0.00632263
    Iteration 96, loss = 0.00661525
    Iteration 97, loss = 0.00660343
    Iteration 98, loss = 0.00624138
    Iteration 99, loss = 0.00567034
    Iteration 100, loss = 0.00570611
    Iteration 101, loss = 0.00530795
    Iteration 102, loss = 0.00673385
    Iteration 103, loss = 0.00557953
    Iteration 104, loss = 0.00572762
    Iteration 105, loss = 0.00540274
    Iteration 106, loss = 0.00498002
    Iteration 107, loss = 0.00472875
    Iteration 108, loss = 0.00448512
    Iteration 109, loss = 0.00458976
    Iteration 110, loss = 0.00443120
    Iteration 111, loss = 0.00419521
    Iteration 112, loss = 0.00401530
    Iteration 113, loss = 0.00429276
    Iteration 114, loss = 0.00381747
    Iteration 115, loss = 0.00376401
    Iteration 116, loss = 0.00424062
    Iteration 117, loss = 0.00429075
    Iteration 118, loss = 0.00402754
    Iteration 119, loss = 0.00395871
    Iteration 120, loss = 0.00368692
    Iteration 121, loss = 0.00373518
    Iteration 122, loss = 0.00386055
    Iteration 123, loss = 0.00333427
    Iteration 124, loss = 0.00342638
    Iteration 125, loss = 0.00333537
    Iteration 126, loss = 0.00325015
    Iteration 127, loss = 0.00309445
    Iteration 128, loss = 0.00304465
    Iteration 129, loss = 0.00291096
    Iteration 130, loss = 0.00304380
    Iteration 131, loss = 0.00292463
    Iteration 132, loss = 0.00275706
    Iteration 133, loss = 0.00261260
    Iteration 134, loss = 0.00252586
    Iteration 135, loss = 0.00282788
    Iteration 136, loss = 0.00278809
    Iteration 137, loss = 0.00308401
    Iteration 138, loss = 0.00303444
    Iteration 139, loss = 0.00294400
    Iteration 140, loss = 0.00269864
    Iteration 141, loss = 0.00289751
    Iteration 142, loss = 0.00299369
    Iteration 143, loss = 0.00260304
    Iteration 144, loss = 0.00253619
    Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.
    Fit against 1000 pts: : 2.79e+00 seconds
    Evaluate trained model with onnx: 1.80e-02 seconds




.. GENERATED FROM PYTHON SOURCE LINES 99-100

We can now finish off by evaluating the true brightness in this attitude profile and plot the results

.. GENERATED FROM PYTHON SOURCE LINES 100-111

.. code-block:: Python

    true_b = mlp_bm.brightness(svb, ovb)

    plt.figure()
    sns.lineplot(x=t_eval, y=true_b, errorbar=None)
    sns.lineplot(x=t_eval, y=mdl_b_onnx, errorbar=None)
    plt.title(f'Light Curves for {obj.file_name}, {num_train} Training Points')
    plt.xlabel('Time [s]')
    plt.ylabel('Apparent Magnitude')
    plt.legend(['True', 'Model'])
    plt.grid()
    plt.show()



.. image-sg:: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002.png
   :alt: Light Curves for cube.obj, 1000 Training Points
   :srcset: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002.png, /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002_2_00x.png 2.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.100 seconds)


.. _sphx_glr_download_gallery_01-light_curves_neural_network_brightness.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: neural_network_brightness.ipynb <neural_network_brightness.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: neural_network_brightness.py <neural_network_brightness.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: neural_network_brightness.zip <neural_network_brightness.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
