
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/01-light_curves/light_curve_units.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_01-light_curves_light_curve_units.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_01-light_curves_light_curve_units.py:


Light Curve Units
=================

Expressing the same light curve in different units.

.. GENERATED FROM PYTHON SOURCE LINES 7-30

.. code-block:: Python


    import datetime
    from typing import Any

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns

    import mirage as mr
    import mirage.vis as mrv


    def aligned_nadir_constrained_sun_attitude(
        obj: mr.SpaceObject, dates: np.ndarray[datetime.datetime, Any]
    ) -> mr.AlignedAndConstrainedAttitude:
        r_obj_j2k = obj.propagate(dates)
        sv = mr.sun(dates)
        nadir = -mr.hat(r_obj_j2k)
        return mr.AlignedAndConstrainedAttitude(
            v_align=nadir, v_const=sv, dates=dates, axis_order=(1, 2, 0)
        )









.. GENERATED FROM PYTHON SOURCE LINES 31-32

Setting up analysis times

.. GENERATED FROM PYTHON SOURCE LINES 32-39

.. code-block:: Python

    date_start = mr.utc(2023, 5, 26)
    (dates, epsecs) = mr.date_arange(
        date_start - mr.days(1), date_start, mr.seconds(100), return_epsecs=True
    )
    ephr = epsecs / 3600  # Epoch hours
    integration_time_s = 10.0  # Seconds








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Setting up the scenario objects

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: Python

    obj = mr.SpaceObject('matlib_hylas4.obj', identifier='goes 15')
    brdf = mr.Brdf('phong')
    station = mr.Station(preset='pogs')
    # Observing from the Purdue Optical Ground Station in New Mexico








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Defining observation constraints on the station

.. GENERATED FROM PYTHON SOURCE LINES 48-57

.. code-block:: Python

    station.constraints = [
        mr.SnrConstraint(3),
        mr.ElevationConstraint(10),
        mr.TargetIlluminatedConstraint(),
        mr.ObserverEclipseConstraint(station),
        mr.VisualMagnitudeConstraint(18),
        mr.MoonExclusionConstraint(30),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 58-59

Defining the object's attitude profile and mass properties

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: Python

    obj_attitude = aligned_nadir_constrained_sun_attitude(obj, dates)








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Computing the full noisy light curve

.. GENERATED FROM PYTHON SOURCE LINES 63-77

.. code-block:: Python

    (lc_noisy_sampler, aux_data) = station.observe_light_curve(
        obj,
        obj_attitude,
        brdf,
        dates,
        integration_time_s,
        use_engine=True,
        model_scale_factor=1,
        show_window=True,
        instances=1,
        rotate_panels=True,
    )
    lc_noisy = lc_noisy_sampler()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-10-22 15:51:16.525 LightCurveEngine-mac-arm[36975:70692201] +[IMKClient subclass]: chose IMKClient_Legacy
    2024-10-22 15:51:16.525 LightCurveEngine-mac-arm[36975:70692201] +[IMKInputSession subclass]: chose IMKInputSession_Legacy





.. GENERATED FROM PYTHON SOURCE LINES 78-79

Extracting data and plotting results

.. GENERATED FROM PYTHON SOURCE LINES 79-131

.. code-block:: Python

    lc_clean = aux_data['lc_clean']
    sint = aux_data['sint']

    plt.figure(figsize=(10, 8))
    plt.subplot(4, 1, 1)
    sns.scatterplot(x=ephr, y=lc_noisy, linewidth=0.05, size=0.1)
    # sns.scatterplot(x=ephr, y=lc_clean, linewidth=0.05, size=0.05, color="k")
    plt.xlim((0, np.max(ephr)))
    mrv.texit(
        'Synthetic GOES 15 Light Curves',
        '',
        r'$\left[\mathrm{ADU} \right]$',
        ['Measurements'],
    )

    lc_noisy_irrad = lc_noisy / (sint * integration_time_s)
    lc_clean_irrad = lc_clean / (sint * integration_time_s)
    plt.subplot(4, 1, 2)
    sns.scatterplot(x=ephr, y=lc_noisy_irrad, linewidth=0.05, size=0.2)
    # sns.scatterplot(x=ephr, y=lc_clean_irrad, linewidth=0.05, size=0.1, color="k")
    mrv.texit(
        '',
        '',
        r'$I \: \left[ \frac{W}{m^2} \right]$',
    )
    plt.xlim((0, np.max(ephr)))

    lc_noisy_irrad_unit = lc_noisy_irrad * (aux_data['rmag_station_to_sat'] * 1e3) ** 2
    lc_clean_irrad_unit = lc_clean_irrad * (aux_data['rmag_station_to_sat'] * 1e3) ** 2
    plt.subplot(4, 1, 3)
    sns.scatterplot(x=ephr, y=lc_noisy_irrad_unit, linewidth=0.05, size=0.2)
    # sns.scatterplot(x=ephr, y=lc_clean_irrad_unit, linewidth=0.05, size=0.1, color="k")
    mrv.texit(
        '',
        '',
        r'$\hat{I}$ [nondim]',
    )
    plt.xlim((0, np.max(ephr)))

    lc_noisy_mag = mr.irradiance_to_apparent_magnitude(lc_noisy_irrad)
    lc_clean_mag = mr.irradiance_to_apparent_magnitude(lc_clean_irrad)
    plt.subplot(4, 1, 4)
    sns.scatterplot(x=ephr, y=lc_noisy_mag, linewidth=0.05, size=0.05)
    # sns.scatterplot(x=ephr, y=lc_clean_mag, linewidth=0.05, size=0.1, color="k")
    mrv.texit(
        '',
        f"Hours after {date_start.strftime('%Y-%m-%d %H:%M:%S UTC')}",
        '$m$ [nondim]',
    )
    plt.xlim((0, np.max(ephr)))
    plt.tight_layout()
    plt.show()



.. image-sg:: /gallery/01-light_curves/images/sphx_glr_light_curve_units_001.png
   :alt: Synthetic GOES 15 Light Curves
   :srcset: /gallery/01-light_curves/images/sphx_glr_light_curve_units_001.png, /gallery/01-light_curves/images/sphx_glr_light_curve_units_001_2_00x.png 2.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.066 seconds)


.. _sphx_glr_download_gallery_01-light_curves_light_curve_units.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: light_curve_units.ipynb <light_curve_units.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: light_curve_units.py <light_curve_units.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: light_curve_units.zip <light_curve_units.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
