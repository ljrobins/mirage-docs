
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/06-attitude/aligned_angle_constrained.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_06-attitude_aligned_angle_constrained.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_06-attitude_aligned_angle_constrained.py:


Aligned and Constrained
=======================

Simulates and animates an aligned and constrained attitude profile

.. note:: If you want to record a .mp4 video instead, try ``pl.open_movie("aligned_and_constrained.mov", framerate=30, quality=9)``

.. GENERATED FROM PYTHON SOURCE LINES 9-84



.. image-sg:: /gallery/06-attitude/images/sphx_glr_aligned_angle_constrained_001.gif
   :alt: aligned angle constrained
   :srcset: /gallery/06-attitude/images/sphx_glr_aligned_angle_constrained_001.gif
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/liamrobinson/Documents/maintained-research/mirage/mirage/orbit.py:504: UserWarning: Velocity is transformation is missing omega cross r term from TEME to J2000, but this is tiny
      warnings.warn(






|

.. code-block:: Python


    import numpy as np
    import pyvista as pv

    import mirage as mr
    import mirage.vis as mrv

    data_points = 100
    obj = mr.SpaceObject('matlib_gps_iii.obj', identifier='NAVSTAR 80 (USA 309)')
    jd0, jdf = 2459840.6618391783, 2459840.9182615164
    date0, datef = mr.jd_to_date(jd0), mr.jd_to_date(jdf)
    (date_space, epsec_space) = mr.date_linspace(
        date0, datef, data_points, return_epsecs=True
    )
    (r, v) = obj.propagate(date_space, return_velocity=True)

    orbit_normal = mr.hat(np.cross(r, v))
    sat_nadir = -mr.hat(r)
    t = epsec_space / np.max(epsec_space) * 4 * np.pi

    sat_sun = mr.hat(mr.sun(date_space))
    att = mr.AlignedAndConstrainedAttitude(
        sat_nadir, sat_sun, date_space, axis_order=(2, 0, 1)
    )
    c = att.dcms_at_dates(date_space)
    quat = mr.dcm_to_quat(c)
    (v1, v2, v3) = att.basis_vectors_at_dates(date_space)

    sun_in_body = mr.stack_mat_mult_vec(c, sat_sun)
    obs_in_body = mr.stack_mat_mult_vec(c, sat_nadir)

    pl = pv.Plotter()
    pl.open_gif('aligned_and_constrained.gif', fps=20)

    mrv.plot3(pl, r, color='cyan', line_width=10)

    omesh = obj._mesh.copy()
    cdist = 300
    pdist = cdist / 4
    psize = 30
    pl._on_first_render_request()
    pl.render()
    cam_light = pv.Light(
        color='white', attenuation_values=(0.0, 0.01, 0.0), positional=True
    )

    for i in range(data_points - 1):
        pl.camera.position = (
            r[i, :] - cdist * sat_nadir[i, :] + cdist / 10 * orbit_normal[i, :]
        )
        pl.camera.focal_point = r[i, :]
        mrv.render_spaceobject(
            pl, obj, origin=r[i, :], scale=5, opacity=1.0, quat=quat[i, :], lighting=True
        )
        mrv.plot_arrow(pl, r[i, :], v1[i, :], scale=pdist, name='arr_v1')
        mrv.plot_arrow(pl, r[i, :], v2[i, :], scale=pdist, name='arr_v2')
        mrv.plot_arrow(pl, r[i, :], v3[i, :], scale=pdist, name='arr_v3')
        mrv.plot_arrow(
            pl,
            r[i, :],
            sat_sun[i, :],
            scale=pdist,
            name='arr_sun',
            color='y',
            label='Sun',
        )
        mrv.plot_earth(pl, date=date_space[i])
        cam_light.position = pl.camera.position
        cam_light.focal_point = pl.camera.focal_point
        if i == 0:
            pl.add_light(cam_light)

        pl.write_frame()
        obj._mesh.copy_from(omesh)
    pl.close()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 40.741 seconds)


.. _sphx_glr_download_gallery_06-attitude_aligned_angle_constrained.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: aligned_angle_constrained.ipynb <aligned_angle_constrained.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: aligned_angle_constrained.py <aligned_angle_constrained.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: aligned_angle_constrained.zip <aligned_angle_constrained.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
